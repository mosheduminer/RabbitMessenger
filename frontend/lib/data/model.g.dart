// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:User.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// User TABLE
class TableUser extends SqfEntityTableBase {
  TableUser() {
    // declare properties of EntityTable
    tableName = 'users';
    primaryKeyName = 'user_id';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('hash', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldRelationshipBase(
          TableChannel.getInstance, DeleteRule.NO_ACTION,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'channelsChannel_id',
          isUnique: false,
          isNotNull: false,
          isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableUser();
  }
}

// Channel TABLE
class TableChannel extends SqfEntityTableBase {
  TableChannel() {
    // declare properties of EntityTable
    tableName = 'channels';
    primaryKeyName = 'channel_id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('id', DbType.integer,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('type', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableChannel();
  }
}

// UsersChannels TABLE
class TableUsersChannels extends SqfEntityTableBase {
  TableUsersChannels() {
    // declare properties of EntityTable
    tableName = 'usersChannels';
    relationType = RelationType.MANY_TO_MANY;
    primaryKeyName = '';
    primaryKeyType = null;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(TableUser.getInstance, DeleteRule.SET_NULL,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'user_id',
          isPrimaryKeyField: true,
          isNotNull: false),
      SqfEntityFieldRelationshipBase(
          TableChannel.getInstance, DeleteRule.SET_NULL,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'channel_id',
          isPrimaryKeyField: true,
          isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableUsersChannels();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class DbModel extends SqfEntityModelProvider {
  DbModel() {
    databaseName = dbModel.databaseName;
    password = dbModel.password;
    dbVersion = dbModel.dbVersion;
    databaseTables = [
      TableUser.getInstance,
      TableChannel.getInstance,
    ];

    bundledDatabasePath = dbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region User
class User {
  User({this.user_id, this.name, this.hash, this.channelsChannel_id}) {
    _setDefaultValues();
  }
  User.withFields(this.user_id, this.name, this.hash, this.channelsChannel_id) {
    _setDefaultValues();
  }
  User.withId(this.user_id, this.name, this.hash, this.channelsChannel_id) {
    _setDefaultValues();
  }
  User.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    user_id = o['user_id'] as String;
    if (o['name'] != null) {
      name = o['name'] as String;
    }
    if (o['hash'] != null) {
      hash = o['hash'] as String;
    }
    channelsChannel_id = int.tryParse(o['channelsChannel_id'].toString());

    // RELATIONSHIPS FromMAP
    plChannel = o['channel'] != null
        ? Channel.fromMap(o['channel'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP

    isSaved = true;
  }
  // FIELDS (User)
  String? user_id;
  String? name;
  String? hash;
  int? channelsChannel_id;
  bool? isSaved;
  BoolResult? saveResult;
  // end FIELDS (User)

// RELATIONSHIPS (User)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plChannel', 'plField2'..]) or so on..
  Channel? plChannel;

  /// get Channel By ChannelsChannel_id
  Future<Channel?> getChannel(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Channel().getById(channelsChannel_id,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (User)

// COLLECTIONS & VIRTUALS (User)
  ///(RelationType.MANY_TO_MANY) (usersChannels) to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plChannels', 'plField2'..]) or so on..
  List<Channel>? plChannels;

  /// get Channel(s) filtered by channel_id IN usersChannels
  ChannelFilterBuilder? getChannels(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Channel()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .where(
            'user_id IN (SELECT channel_id FROM usersChannels WHERE user_id=?)',
            parameterValue: user_id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (User)

  static const bool _softDeleteActivated = false;
  UserManager? __mnUser;

  UserManager get _mnUser {
    return __mnUser = __mnUser ?? UserManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (user_id != null) {
      map['user_id'] = user_id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (hash != null) {
      map['hash'] = hash;
    }

    if (channelsChannel_id != null) {
      map['channelsChannel_id'] = forView
          ? plChannel == null
              ? channelsChannel_id
              : plChannel!.type
          : channelsChannel_id;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (user_id != null) {
      map['user_id'] = user_id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (hash != null) {
      map['hash'] = hash;
    }

    if (channelsChannel_id != null) {
      map['channelsChannel_id'] = forView
          ? plChannel == null
              ? channelsChannel_id
              : plChannel!.type
          : channelsChannel_id;
    }

// COLLECTIONS (User)
    if (!forQuery) {
      map['Channels'] = await getChannels()!.toMapList();
    }
// END COLLECTIONS (User)

    return map;
  }

  /// This method returns Json String [User]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [User]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [user_id, name, hash, channelsChannel_id];
  }

  List<dynamic> toArgsWithIds() {
    return [user_id, name, hash, channelsChannel_id];
  }

  static Future<List<User>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR User.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<User>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <User>[];
    try {
      objList = list
          .map((user) => User.fromMap(user as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR User.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<User>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<User> objList = <User>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = User.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('users.plChannels') && */ (preloadFields ==
                null ||
            preloadFields.contains('plChannels'))) {
          /*_loadedfields!.add('users.plChannels'); */
          obj.plChannels = obj.plChannels ??
              await obj.getChannels()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('channels.plChannel') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plChannel'))) {
          /*_loadedfields!.add('channels.plChannel');*/
          obj.plChannel = obj.plChannel ??
              await obj.getChannel(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns User by ID if exist, otherwise returns null
  ///
  /// Primary Keys: String? user_id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns User if exist, otherwise returns null
  Future<User?> getById(String? user_id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (user_id == null) {
      return null;
    }
    User? obj;
    final data = await _mnUser.getById([user_id]);
    if (data.length != 0) {
      obj = User.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('users.plChannels') && */ (preloadFields ==
                null ||
            preloadFields.contains('plChannels'))) {
          /*_loadedfields!.add('users.plChannels'); */
          obj.plChannels = obj.plChannels ??
              await obj.getChannels()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('channels.plChannel') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plChannel'))) {
          /*_loadedfields!.add('channels.plChannel');*/
          obj.plChannel = obj.plChannel ??
              await obj.getChannel(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (User) object. If the Primary Key (user_id) field is null, returns Error.
  ///
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  ///
  /// Call the saveAs() method if you do not want to save it when there is another row with the same user_id

  /// <returns>Returns BoolResult
  Future<BoolResult> save() async {
    final result = BoolResult(success: false);
    try {
      await _mnUser.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO users (user_id,name, hash, channelsChannel_id)  VALUES (?,?,?,?)',
          toArgsWithIds());
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<User> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<User> users) async {
    // final results = _mnUser.saveAll('INSERT OR REPLACE INTO users (user_id,name, hash, channelsChannel_id)  VALUES (?,?,?,?)',users);
    // return results; removed in sqfentity_gen 1.3.0+6
    await DbModel().batchStart();
    for (final obj in users) {
      await obj.save();
    }
    //    return DbModel().batchCommit();
    final result = await DbModel().batchCommit();

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns 1
  Future<int?> upsert() async {
    try {
      if (await _mnUser.rawInsert(
              'INSERT OR REPLACE INTO users (user_id,name, hash, channelsChannel_id)  VALUES (?,?,?,?)',
              [user_id, name, hash, channelsChannel_id]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'User user_id=$user_id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'User user_id=$user_id did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'User Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes User

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete User invoked (user_id=$user_id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnUser.delete(
          QueryParams(whereString: 'user_id=?', whereArguments: [user_id]));
    } else {
      return _mnUser.updateBatch(
          QueryParams(whereString: 'user_id=?', whereArguments: [user_id]),
          {'isDeleted': 1});
    }
  }

  UserFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UserFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  UserFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UserFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion user

// region UserField
class UserField extends SearchCriteria {
  UserField(this.userFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  UserFilterBuilder userFB;

  UserField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  UserFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param, SqlSyntax.EQuals,
            userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param, SqlSyntax.NotEQuals,
            userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param, SqlSyntax.EQualsOrNull,
            userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder isNull() {
    userFB._addedBlocks = setCriteria(
        0,
        userFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      userFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          userFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userFB._addedBlocks);
      _waitingNot = '';
      userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
          userFB._addedBlocks.retVal;
    }
    return userFB;
  }

  UserFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      userFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          userFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userFB._addedBlocks);
      _waitingNot = '';
      userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
          userFB._addedBlocks.retVal;
      userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
          userFB._addedBlocks.retVal;
    }
    return userFB;
  }

  UserFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      userFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          userFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userFB._addedBlocks);
      _waitingNot = '';
      userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
          userFB._addedBlocks.retVal;
    }
    return userFB;
  }

  UserFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      userFB._addedBlocks = setCriteria(
          pFirst,
          userFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        userFB._addedBlocks = setCriteria(pFirst, userFB.parameters, param,
            SqlSyntax.LessThan, userFB._addedBlocks);
      } else {
        userFB._addedBlocks = setCriteria(pFirst, userFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, userFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        userFB._addedBlocks = setCriteria(pLast, userFB.parameters, param,
            SqlSyntax.GreaterThan, userFB._addedBlocks);
      } else {
        userFB._addedBlocks = setCriteria(pLast, userFB.parameters, param,
            SqlSyntax.LessThanOrEquals, userFB._addedBlocks);
      }
    }
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param, SqlSyntax.GreaterThan,
            userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.LessThanOrEquals, userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param, SqlSyntax.LessThan,
            userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param, SqlSyntax.LessThan,
            userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.LessThanOrEquals, userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param, SqlSyntax.GreaterThan,
            userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder inValues(dynamic pValue) {
    userFB._addedBlocks = setCriteria(
        pValue,
        userFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }
}
// endregion UserField

// region UserFilterBuilder
class UserFilterBuilder extends SearchCriteria {
  UserFilterBuilder(User obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  User? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  UserFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  UserFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  UserFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  UserFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  UserFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  UserFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  UserFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  UserFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  UserFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  UserFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  UserFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  UserField setField(UserField? field, String colName, DbType dbtype) {
    return UserField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  UserField? _user_id;
  UserField get user_id {
    return _user_id = setField(_user_id, 'user_id', DbType.integer);
  }

  UserField? _name;
  UserField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  UserField? _hash;
  UserField get hash {
    return _hash = setField(_hash, 'hash', DbType.text);
  }

  UserField? _channelsChannel_id;
  UserField get channelsChannel_id {
    return _channelsChannel_id =
        setField(_channelsChannel_id, 'channelsChannel_id', DbType.integer);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (User._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<User> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (User._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnUser.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnUser.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'user_id IN (SELECT user_id from users ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnUser.updateBatch(qparams, values);
  }

  /// This method always returns User Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<User>
  Future<User?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnUser.toList(qparams);
    final data = await objFuture;
    User? obj;
    if (data.isNotEmpty) {
      obj = User.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('users.plChannels') && */ (preloadFields ==
                null ||
            preloadFields.contains('plChannels'))) {
          /*_loadedfields!.add('users.plChannels'); */
          obj.plChannels = obj.plChannels ??
              await obj.getChannels()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('channels.plChannel') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plChannel'))) {
          /*_loadedfields!.add('channels.plChannel');*/
          obj.plChannel = obj.plChannel ??
              await obj.getChannel(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [User]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? userCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final usersFuture = await _obj!._mnUser.toList(qparams);
    final int count = usersFuture[0]['CNT'] as int;
    if (userCount != null) {
      userCount(count);
    }
    return count;
  }

  /// This method returns List<User> [User]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<User>
  Future<List<User>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<User> usersData = await User.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return usersData;
  }

  /// This method returns Json String [User]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [User]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [User]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnUser.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [User]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `user_id` FROM users WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  Future<List<String>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<String> user_idData = <String>[];
    qparams.selectColumns = ['user_id'];
    final user_idFuture = await _obj!._mnUser.toList(qparams);

    final int count = user_idFuture.length;
    for (int i = 0; i < count; i++) {
      user_idData.add(user_idFuture[i]['user_id'] as String);
    }
    return user_idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [User]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnUser.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await User.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnUser.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion UserFilterBuilder

// region UserFields
class UserFields {
  static TableField? _fUser_id;
  static TableField get user_id {
    return _fUser_id =
        _fUser_id ?? SqlSyntax.setField(_fUser_id, 'user_id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fHash;
  static TableField get hash {
    return _fHash = _fHash ?? SqlSyntax.setField(_fHash, 'hash', DbType.text);
  }

  static TableField? _fChannelsChannel_id;
  static TableField get channelsChannel_id {
    return _fChannelsChannel_id = _fChannelsChannel_id ??
        SqlSyntax.setField(
            _fChannelsChannel_id, 'channelsChannel_id', DbType.integer);
  }
}
// endregion UserFields

//region UserManager
class UserManager extends SqfEntityProvider {
  UserManager()
      : super(DbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'users';
  static final List<String> _primaryKeyList = ['user_id'];
  static final String _whereStr = 'user_id=?';
}

//endregion UserManager
// region Channel
class Channel {
  Channel({this.channel_id, this.id, this.type}) {
    _setDefaultValues();
  }
  Channel.withFields(this.channel_id, this.id, this.type) {
    _setDefaultValues();
  }
  Channel.withId(this.channel_id, this.id, this.type) {
    _setDefaultValues();
  }
  Channel.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    channel_id = int.tryParse(o['channel_id'].toString());
    if (o['id'] != null) {
      id = int.tryParse(o['id'].toString());
    }
    if (o['type'] != null) {
      type = o['type'] as String;
    }

    isSaved = true;
  }
  // FIELDS (Channel)
  int? channel_id;
  int? id;
  String? type;
  bool? isSaved;
  BoolResult? saveResult;
  // end FIELDS (Channel)

// COLLECTIONS & VIRTUALS (Channel)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plUsers', 'plField2'..]) or so on..
  List<User>? plUsers;

  /// get User(s) filtered by channel_id=channelsChannel_id
  UserFilterBuilder? getUsers(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (channel_id == null) {
      return null;
    }
    return User()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .channelsChannel_id
        .equals(channel_id)
        .and;
  }

  ///(RelationType.MANY_TO_MANY) (usersChannels) to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plUsersBychannelsChannel_id', 'plField2'..]) or so on..
  List<User>? plUsersBychannelsChannel_id;

  /// get User(s) filtered by user_id IN usersChannels
  UserFilterBuilder? getUsersBychannelsChannel_id(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return User()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .where(
            'channel_id IN (SELECT user_id FROM usersChannels WHERE channel_id=?)',
            parameterValue: channel_id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Channel)

  static const bool _softDeleteActivated = false;
  ChannelManager? __mnChannel;

  ChannelManager get _mnChannel {
    return __mnChannel = __mnChannel ?? ChannelManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (channel_id != null) {
      map['channel_id'] = channel_id;
    }
    if (id != null) {
      map['id'] = id;
    }

    if (type != null) {
      map['type'] = type;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (channel_id != null) {
      map['channel_id'] = channel_id;
    }
    if (id != null) {
      map['id'] = id;
    }

    if (type != null) {
      map['type'] = type;
    }

// COLLECTIONS (Channel)
    if (!forQuery) {
      map['Users'] = await getUsers()!.toMapList();
    }
    if (!forQuery) {
      map['Users'] = await getUsers()!.toMapList();
    }
// END COLLECTIONS (Channel)

    return map;
  }

  /// This method returns Json String [Channel]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Channel]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [channel_id, id, type];
  }

  List<dynamic> toArgsWithIds() {
    return [channel_id, id, type];
  }

  static Future<List<Channel>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Channel.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Channel>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Channel>[];
    try {
      objList = list
          .map((channel) => Channel.fromMap(channel as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Channel.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Channel>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Channel> objList = <Channel>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Channel.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('channels.plUsers') && */ (preloadFields ==
                null ||
            preloadFields.contains('plUsers'))) {
          /*_loadedfields!.add('channels.plUsers'); */
          obj.plUsers = obj.plUsers ??
              await obj.getUsers()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('channels.plUsersBychannelsChannel_id') && */ (preloadFields ==
                null ||
            preloadFields.contains('plUsersBychannelsChannel_id'))) {
          /*_loadedfields!.add('channels.plUsersBychannelsChannel_id'); */
          obj.plUsersBychannelsChannel_id = obj.plUsersBychannelsChannel_id ??
              await obj.getUsersBychannelsChannel_id()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Channel by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? channel_id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Channel if exist, otherwise returns null
  Future<Channel?> getById(int? channel_id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (channel_id == null) {
      return null;
    }
    Channel? obj;
    final data = await _mnChannel.getById([channel_id]);
    if (data.length != 0) {
      obj = Channel.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('channels.plUsers') && */ (preloadFields ==
                null ||
            preloadFields.contains('plUsers'))) {
          /*_loadedfields!.add('channels.plUsers'); */
          obj.plUsers = obj.plUsers ??
              await obj.getUsers()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('channels.plUsersBychannelsChannel_id') && */ (preloadFields ==
                null ||
            preloadFields.contains('plUsersBychannelsChannel_id'))) {
          /*_loadedfields!.add('channels.plUsersBychannelsChannel_id'); */
          obj.plUsersBychannelsChannel_id = obj.plUsersBychannelsChannel_id ??
              await obj.getUsersBychannelsChannel_id()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Channel) object. If the channel_id field is null, saves as a new record and returns new channel_id, if channel_id is not null then updates record

  /// <returns>Returns channel_id
  Future<int?> save() async {
    if (channel_id == null || channel_id == 0 || !isSaved!) {
      await _mnChannel.insert(this);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      // channel_id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnChannel.update(this);
    }

    return channel_id;
  }

  /// saveAll method saves the sent List<Channel> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Channel> channels) async {
    // final results = _mnChannel.saveAll('INSERT OR REPLACE INTO channels (channel_id,id, type)  VALUES (?,?,?)',channels);
    // return results; removed in sqfentity_gen 1.3.0+6
    await DbModel().batchStart();
    for (final obj in channels) {
      await obj.save();
    }
    //    return DbModel().batchCommit();
    final result = await DbModel().batchCommit();

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns channel_id
  Future<int?> upsert() async {
    try {
      if (await _mnChannel.rawInsert(
              'INSERT OR REPLACE INTO channels (channel_id,id, type)  VALUES (?,?,?)',
              [channel_id, id, type]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'Channel channel_id=$channel_id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Channel channel_id=$channel_id did not update');
      }
      return channel_id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Channel Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Channel>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Channel> channels) async {
    final results = await _mnChannel.rawInsertAll(
        'INSERT OR REPLACE INTO channels (channel_id,id, type)  VALUES (?,?,?)',
        channels);
    return results;
  }

  /// Deletes Channel

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Channel invoked (channel_id=$channel_id)');
    if (await User()
            .select()
            .channelsChannel_id
            .equals(channel_id)
            .and
            .toCount() >
        0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (User.channelsChannel_id)');
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnChannel.delete(QueryParams(
          whereString: 'channel_id=?', whereArguments: [channel_id]));
    } else {
      return _mnChannel.updateBatch(
          QueryParams(
              whereString: 'channel_id=?', whereArguments: [channel_id]),
          {'isDeleted': 1});
    }
  }

  ChannelFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ChannelFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ChannelFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ChannelFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion channel

// region ChannelField
class ChannelField extends SearchCriteria {
  ChannelField(this.channelFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  ChannelFilterBuilder channelFB;

  ChannelField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ChannelFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    channelFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, channelFB.parameters, param, SqlSyntax.EQuals,
            channelFB._addedBlocks)
        : setCriteria(pValue, channelFB.parameters, param, SqlSyntax.NotEQuals,
            channelFB._addedBlocks);
    _waitingNot = '';
    channelFB._addedBlocks.needEndBlock![channelFB._blockIndex] =
        channelFB._addedBlocks.retVal;
    return channelFB;
  }

  ChannelFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    channelFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, channelFB.parameters, param,
            SqlSyntax.EQualsOrNull, channelFB._addedBlocks)
        : setCriteria(pValue, channelFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, channelFB._addedBlocks);
    _waitingNot = '';
    channelFB._addedBlocks.needEndBlock![channelFB._blockIndex] =
        channelFB._addedBlocks.retVal;
    return channelFB;
  }

  ChannelFilterBuilder isNull() {
    channelFB._addedBlocks = setCriteria(
        0,
        channelFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        channelFB._addedBlocks);
    _waitingNot = '';
    channelFB._addedBlocks.needEndBlock![channelFB._blockIndex] =
        channelFB._addedBlocks.retVal;
    return channelFB;
  }

  ChannelFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      channelFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          channelFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          channelFB._addedBlocks);
      _waitingNot = '';
      channelFB._addedBlocks.needEndBlock![channelFB._blockIndex] =
          channelFB._addedBlocks.retVal;
    }
    return channelFB;
  }

  ChannelFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      channelFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          channelFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          channelFB._addedBlocks);
      _waitingNot = '';
      channelFB._addedBlocks.needEndBlock![channelFB._blockIndex] =
          channelFB._addedBlocks.retVal;
      channelFB._addedBlocks.needEndBlock![channelFB._blockIndex] =
          channelFB._addedBlocks.retVal;
    }
    return channelFB;
  }

  ChannelFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      channelFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          channelFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          channelFB._addedBlocks);
      _waitingNot = '';
      channelFB._addedBlocks.needEndBlock![channelFB._blockIndex] =
          channelFB._addedBlocks.retVal;
    }
    return channelFB;
  }

  ChannelFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      channelFB._addedBlocks = setCriteria(
          pFirst,
          channelFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          channelFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        channelFB._addedBlocks = setCriteria(pFirst, channelFB.parameters,
            param, SqlSyntax.LessThan, channelFB._addedBlocks);
      } else {
        channelFB._addedBlocks = setCriteria(pFirst, channelFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, channelFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        channelFB._addedBlocks = setCriteria(pLast, channelFB.parameters, param,
            SqlSyntax.GreaterThan, channelFB._addedBlocks);
      } else {
        channelFB._addedBlocks = setCriteria(pLast, channelFB.parameters, param,
            SqlSyntax.LessThanOrEquals, channelFB._addedBlocks);
      }
    }
    _waitingNot = '';
    channelFB._addedBlocks.needEndBlock![channelFB._blockIndex] =
        channelFB._addedBlocks.retVal;
    return channelFB;
  }

  ChannelFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    channelFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, channelFB.parameters, param,
            SqlSyntax.GreaterThan, channelFB._addedBlocks)
        : setCriteria(pValue, channelFB.parameters, param,
            SqlSyntax.LessThanOrEquals, channelFB._addedBlocks);
    _waitingNot = '';
    channelFB._addedBlocks.needEndBlock![channelFB._blockIndex] =
        channelFB._addedBlocks.retVal;
    return channelFB;
  }

  ChannelFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    channelFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, channelFB.parameters, param, SqlSyntax.LessThan,
            channelFB._addedBlocks)
        : setCriteria(pValue, channelFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, channelFB._addedBlocks);
    _waitingNot = '';
    channelFB._addedBlocks.needEndBlock![channelFB._blockIndex] =
        channelFB._addedBlocks.retVal;
    return channelFB;
  }

  ChannelFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    channelFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, channelFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, channelFB._addedBlocks)
        : setCriteria(pValue, channelFB.parameters, param, SqlSyntax.LessThan,
            channelFB._addedBlocks);
    _waitingNot = '';
    channelFB._addedBlocks.needEndBlock![channelFB._blockIndex] =
        channelFB._addedBlocks.retVal;
    return channelFB;
  }

  ChannelFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    channelFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, channelFB.parameters, param,
            SqlSyntax.LessThanOrEquals, channelFB._addedBlocks)
        : setCriteria(pValue, channelFB.parameters, param,
            SqlSyntax.GreaterThan, channelFB._addedBlocks);
    _waitingNot = '';
    channelFB._addedBlocks.needEndBlock![channelFB._blockIndex] =
        channelFB._addedBlocks.retVal;
    return channelFB;
  }

  ChannelFilterBuilder inValues(dynamic pValue) {
    channelFB._addedBlocks = setCriteria(
        pValue,
        channelFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        channelFB._addedBlocks);
    _waitingNot = '';
    channelFB._addedBlocks.needEndBlock![channelFB._blockIndex] =
        channelFB._addedBlocks.retVal;
    return channelFB;
  }
}
// endregion ChannelField

// region ChannelFilterBuilder
class ChannelFilterBuilder extends SearchCriteria {
  ChannelFilterBuilder(Channel obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Channel? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  ChannelFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ChannelFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ChannelFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ChannelFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ChannelFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  ChannelFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ChannelFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ChannelFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ChannelFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ChannelFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ChannelFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  ChannelField setField(ChannelField? field, String colName, DbType dbtype) {
    return ChannelField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  ChannelField? _channel_id;
  ChannelField get channel_id {
    return _channel_id = setField(_channel_id, 'channel_id', DbType.integer);
  }

  ChannelField? _id;
  ChannelField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  ChannelField? _type;
  ChannelField get type {
    return _type = setField(_type, 'type', DbType.text);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Channel._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Channel> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);
    // Check sub records where in (User) according to DeleteRule.NO_ACTION

    final idListUserBYchannelsChannel_id = toListPrimaryKeySQL(false);
    final resUserBYchannelsChannel_id = await User()
        .select()
        .where(
            'channelsChannel_id IN (${idListUserBYchannelsChannel_id['sql']})',
            parameterValue: idListUserBYchannelsChannel_id['args'])
        .toCount();
    if (resUserBYchannelsChannel_id > 0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (User.channelsChannel_id)');
    }

    if (Channel._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnChannel.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnChannel.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'channel_id IN (SELECT channel_id from channels ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnChannel.updateBatch(qparams, values);
  }

  /// This method always returns Channel Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Channel>
  Future<Channel?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnChannel.toList(qparams);
    final data = await objFuture;
    Channel? obj;
    if (data.isNotEmpty) {
      obj = Channel.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('channels.plUsers') && */ (preloadFields ==
                null ||
            preloadFields.contains('plUsers'))) {
          /*_loadedfields!.add('channels.plUsers'); */
          obj.plUsers = obj.plUsers ??
              await obj.getUsers()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('channels.plUsersBychannelsChannel_id') && */ (preloadFields ==
                null ||
            preloadFields.contains('plUsersBychannelsChannel_id'))) {
          /*_loadedfields!.add('channels.plUsersBychannelsChannel_id'); */
          obj.plUsersBychannelsChannel_id = obj.plUsersBychannelsChannel_id ??
              await obj.getUsersBychannelsChannel_id()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Channel]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? channelCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final channelsFuture = await _obj!._mnChannel.toList(qparams);
    final int count = channelsFuture[0]['CNT'] as int;
    if (channelCount != null) {
      channelCount(count);
    }
    return count;
  }

  /// This method returns List<Channel> [Channel]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Channel>
  Future<List<Channel>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Channel> channelsData = await Channel.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return channelsData;
  }

  /// This method returns Json String [Channel]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Channel]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Channel]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnChannel.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Channel]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `channel_id` FROM channels WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> channel_idData = <int>[];
    qparams.selectColumns = ['channel_id'];
    final channel_idFuture = await _obj!._mnChannel.toList(qparams);

    final int count = channel_idFuture.length;
    for (int i = 0; i < count; i++) {
      channel_idData.add(channel_idFuture[i]['channel_id'] as int);
    }
    return channel_idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Channel]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnChannel.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Channel.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnChannel.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ChannelFilterBuilder

// region ChannelFields
class ChannelFields {
  static TableField? _fChannel_id;
  static TableField get channel_id {
    return _fChannel_id = _fChannel_id ??
        SqlSyntax.setField(_fChannel_id, 'channel_id', DbType.integer);
  }

  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fType;
  static TableField get type {
    return _fType = _fType ?? SqlSyntax.setField(_fType, 'type', DbType.text);
  }
}
// endregion ChannelFields

//region ChannelManager
class ChannelManager extends SqfEntityProvider {
  ChannelManager()
      : super(DbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'channels';
  static final List<String> _primaryKeyList = ['channel_id'];
  static final String _whereStr = 'channel_id=?';
}

//endregion ChannelManager
// region UsersChannels
class UsersChannels {
  UsersChannels({this.user_id, this.channel_id}) {
    _setDefaultValues();
  }
  UsersChannels.withFields(this.user_id, this.channel_id) {
    _setDefaultValues();
  }
  UsersChannels.withId(this.user_id, this.channel_id) {
    _setDefaultValues();
  }
  UsersChannels.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    user_id = o['user_id'] as String;

    channel_id = int.tryParse(o['channel_id'].toString());

    // RELATIONSHIPS FromMAP
    plUser = o['user'] != null
        ? User.fromMap(o['user'] as Map<String, dynamic>)
        : null;
    plChannel = o['channel'] != null
        ? Channel.fromMap(o['channel'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP

    isSaved = true;
  }
  // FIELDS (UsersChannels)
  String? user_id;
  int? channel_id;
  bool? isSaved;
  BoolResult? saveResult;
  // end FIELDS (UsersChannels)

// RELATIONSHIPS (UsersChannels)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plUser', 'plField2'..]) or so on..
  User? plUser;

  /// get User By User_id
  Future<User?> getUser(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await User()
        .getById(user_id, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plChannel', 'plField2'..]) or so on..
  Channel? plChannel;

  /// get Channel By Channel_id
  Future<Channel?> getChannel(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Channel().getById(channel_id,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (UsersChannels)

  static const bool _softDeleteActivated = false;
  UsersChannelsManager? __mnUsersChannels;

  UsersChannelsManager get _mnUsersChannels {
    return __mnUsersChannels = __mnUsersChannels ?? UsersChannelsManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (user_id != null) {
      map['user_id'] = forView
          ? plUser == null
              ? user_id
              : plUser!.name
          : user_id;
    }

    if (channel_id != null) {
      map['channel_id'] = forView
          ? plChannel == null
              ? channel_id
              : plChannel!.type
          : channel_id;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (user_id != null) {
      map['user_id'] = forView
          ? plUser == null
              ? user_id
              : plUser!.name
          : user_id;
    }

    if (channel_id != null) {
      map['channel_id'] = forView
          ? plChannel == null
              ? channel_id
              : plChannel!.type
          : channel_id;
    }

    return map;
  }

  /// This method returns Json String [UsersChannels]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [UsersChannels]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [user_id, channel_id];
  }

  List<dynamic> toArgsWithIds() {
    return [user_id, channel_id];
  }

  static Future<List<UsersChannels>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR UsersChannels.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<UsersChannels>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <UsersChannels>[];
    try {
      objList = list
          .map((userschannels) =>
              UsersChannels.fromMap(userschannels as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR UsersChannels.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<UsersChannels>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<UsersChannels> objList = <UsersChannels>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = UsersChannels.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('users.plUser') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plUser'))) {
          /*_loadedfields!.add('users.plUser');*/
          obj.plUser = obj.plUser ??
              await obj.getUser(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedfields!.contains('channels.plChannel') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plChannel'))) {
          /*_loadedfields!.add('channels.plChannel');*/
          obj.plChannel = obj.plChannel ??
              await obj.getChannel(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns UsersChannels by ID if exist, otherwise returns null
  ///
  /// Primary Keys: String? user_id, int? channel_id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns UsersChannels if exist, otherwise returns null
  Future<UsersChannels?> getById(String? user_id, int? channel_id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (user_id == null) {
      return null;
    }
    UsersChannels? obj;
    final data = await _mnUsersChannels.getById([user_id, channel_id]);
    if (data.length != 0) {
      obj = UsersChannels.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('users.plUser') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plUser'))) {
          /*_loadedfields!.add('users.plUser');*/
          obj.plUser = obj.plUser ??
              await obj.getUser(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedfields!.contains('channels.plChannel') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plChannel'))) {
          /*_loadedfields!.add('channels.plChannel');*/
          obj.plChannel = obj.plChannel ??
              await obj.getChannel(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (UsersChannels) object. If the Primary Key (user_id) field is null, returns Error.
  ///
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  ///
  /// Call the saveAs() method if you do not want to save it when there is another row with the same user_id

  /// <returns>Returns BoolResult
  Future<BoolResult> save() async {
    final result = BoolResult(success: false);
    try {
      await _mnUsersChannels.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO usersChannels (user_id, channel_id)  VALUES (?,?)',
          toArgsWithIds());
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<UsersChannels> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<UsersChannels> userschannelses) async {
    // final results = _mnUsersChannels.saveAll('INSERT OR REPLACE INTO usersChannels (user_id, channel_id)  VALUES (?,?)',userschannelses);
    // return results; removed in sqfentity_gen 1.3.0+6
    await DbModel().batchStart();
    for (final obj in userschannelses) {
      await obj.save();
    }
    //    return DbModel().batchCommit();
    final result = await DbModel().batchCommit();

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns 1
  Future<int?> upsert() async {
    try {
      if (await _mnUsersChannels.rawInsert(
              'INSERT OR REPLACE INTO usersChannels (user_id, channel_id)  VALUES (?,?)',
              [user_id, channel_id]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'UsersChannels user_id=$user_id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'UsersChannels user_id=$user_id did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'UsersChannels Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<UsersChannels>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(
      List<UsersChannels> userschannelses) async {
    final results = await _mnUsersChannels.rawInsertAll(
        'INSERT OR REPLACE INTO usersChannels (user_id, channel_id)  VALUES (?,?)',
        userschannelses);
    return results;
  }

  /// Deletes UsersChannels

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete UsersChannels invoked (user_id=$user_id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnUsersChannels.delete(QueryParams(
          whereString: 'user_id=? AND channel_id=?',
          whereArguments: [user_id, channel_id]));
    } else {
      return _mnUsersChannels.updateBatch(
          QueryParams(
              whereString: 'user_id=? AND channel_id=?',
              whereArguments: [user_id, channel_id]),
          {'isDeleted': 1});
    }
  }

  UsersChannelsFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UsersChannelsFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  UsersChannelsFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UsersChannelsFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion userschannels

// region UsersChannelsField
class UsersChannelsField extends SearchCriteria {
  UsersChannelsField(this.userschannelsFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  UsersChannelsFilterBuilder userschannelsFB;

  UsersChannelsField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  UsersChannelsFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    userschannelsFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userschannelsFB.parameters, param,
            SqlSyntax.EQuals, userschannelsFB._addedBlocks)
        : setCriteria(pValue, userschannelsFB.parameters, param,
            SqlSyntax.NotEQuals, userschannelsFB._addedBlocks);
    _waitingNot = '';
    userschannelsFB._addedBlocks.needEndBlock![userschannelsFB._blockIndex] =
        userschannelsFB._addedBlocks.retVal;
    return userschannelsFB;
  }

  UsersChannelsFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    userschannelsFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userschannelsFB.parameters, param,
            SqlSyntax.EQualsOrNull, userschannelsFB._addedBlocks)
        : setCriteria(pValue, userschannelsFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, userschannelsFB._addedBlocks);
    _waitingNot = '';
    userschannelsFB._addedBlocks.needEndBlock![userschannelsFB._blockIndex] =
        userschannelsFB._addedBlocks.retVal;
    return userschannelsFB;
  }

  UsersChannelsFilterBuilder isNull() {
    userschannelsFB._addedBlocks = setCriteria(
        0,
        userschannelsFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        userschannelsFB._addedBlocks);
    _waitingNot = '';
    userschannelsFB._addedBlocks.needEndBlock![userschannelsFB._blockIndex] =
        userschannelsFB._addedBlocks.retVal;
    return userschannelsFB;
  }

  UsersChannelsFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      userschannelsFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          userschannelsFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userschannelsFB._addedBlocks);
      _waitingNot = '';
      userschannelsFB._addedBlocks.needEndBlock![userschannelsFB._blockIndex] =
          userschannelsFB._addedBlocks.retVal;
    }
    return userschannelsFB;
  }

  UsersChannelsFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      userschannelsFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          userschannelsFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userschannelsFB._addedBlocks);
      _waitingNot = '';
      userschannelsFB._addedBlocks.needEndBlock![userschannelsFB._blockIndex] =
          userschannelsFB._addedBlocks.retVal;
      userschannelsFB._addedBlocks.needEndBlock![userschannelsFB._blockIndex] =
          userschannelsFB._addedBlocks.retVal;
    }
    return userschannelsFB;
  }

  UsersChannelsFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      userschannelsFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          userschannelsFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userschannelsFB._addedBlocks);
      _waitingNot = '';
      userschannelsFB._addedBlocks.needEndBlock![userschannelsFB._blockIndex] =
          userschannelsFB._addedBlocks.retVal;
    }
    return userschannelsFB;
  }

  UsersChannelsFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      userschannelsFB._addedBlocks = setCriteria(
          pFirst,
          userschannelsFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userschannelsFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        userschannelsFB._addedBlocks = setCriteria(
            pFirst,
            userschannelsFB.parameters,
            param,
            SqlSyntax.LessThan,
            userschannelsFB._addedBlocks);
      } else {
        userschannelsFB._addedBlocks = setCriteria(
            pFirst,
            userschannelsFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            userschannelsFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        userschannelsFB._addedBlocks = setCriteria(
            pLast,
            userschannelsFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            userschannelsFB._addedBlocks);
      } else {
        userschannelsFB._addedBlocks = setCriteria(
            pLast,
            userschannelsFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            userschannelsFB._addedBlocks);
      }
    }
    _waitingNot = '';
    userschannelsFB._addedBlocks.needEndBlock![userschannelsFB._blockIndex] =
        userschannelsFB._addedBlocks.retVal;
    return userschannelsFB;
  }

  UsersChannelsFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    userschannelsFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userschannelsFB.parameters, param,
            SqlSyntax.GreaterThan, userschannelsFB._addedBlocks)
        : setCriteria(pValue, userschannelsFB.parameters, param,
            SqlSyntax.LessThanOrEquals, userschannelsFB._addedBlocks);
    _waitingNot = '';
    userschannelsFB._addedBlocks.needEndBlock![userschannelsFB._blockIndex] =
        userschannelsFB._addedBlocks.retVal;
    return userschannelsFB;
  }

  UsersChannelsFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    userschannelsFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userschannelsFB.parameters, param,
            SqlSyntax.LessThan, userschannelsFB._addedBlocks)
        : setCriteria(pValue, userschannelsFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, userschannelsFB._addedBlocks);
    _waitingNot = '';
    userschannelsFB._addedBlocks.needEndBlock![userschannelsFB._blockIndex] =
        userschannelsFB._addedBlocks.retVal;
    return userschannelsFB;
  }

  UsersChannelsFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    userschannelsFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userschannelsFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, userschannelsFB._addedBlocks)
        : setCriteria(pValue, userschannelsFB.parameters, param,
            SqlSyntax.LessThan, userschannelsFB._addedBlocks);
    _waitingNot = '';
    userschannelsFB._addedBlocks.needEndBlock![userschannelsFB._blockIndex] =
        userschannelsFB._addedBlocks.retVal;
    return userschannelsFB;
  }

  UsersChannelsFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    userschannelsFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userschannelsFB.parameters, param,
            SqlSyntax.LessThanOrEquals, userschannelsFB._addedBlocks)
        : setCriteria(pValue, userschannelsFB.parameters, param,
            SqlSyntax.GreaterThan, userschannelsFB._addedBlocks);
    _waitingNot = '';
    userschannelsFB._addedBlocks.needEndBlock![userschannelsFB._blockIndex] =
        userschannelsFB._addedBlocks.retVal;
    return userschannelsFB;
  }

  UsersChannelsFilterBuilder inValues(dynamic pValue) {
    userschannelsFB._addedBlocks = setCriteria(
        pValue,
        userschannelsFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        userschannelsFB._addedBlocks);
    _waitingNot = '';
    userschannelsFB._addedBlocks.needEndBlock![userschannelsFB._blockIndex] =
        userschannelsFB._addedBlocks.retVal;
    return userschannelsFB;
  }
}
// endregion UsersChannelsField

// region UsersChannelsFilterBuilder
class UsersChannelsFilterBuilder extends SearchCriteria {
  UsersChannelsFilterBuilder(UsersChannels obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  UsersChannels? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  UsersChannelsFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  UsersChannelsFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  UsersChannelsFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  UsersChannelsFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  UsersChannelsFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  UsersChannelsFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  UsersChannelsFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  UsersChannelsFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  UsersChannelsFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  UsersChannelsFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  UsersChannelsFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  UsersChannelsField setField(
      UsersChannelsField? field, String colName, DbType dbtype) {
    return UsersChannelsField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  UsersChannelsField? _user_id;
  UsersChannelsField get user_id {
    return _user_id = setField(_user_id, 'user_id', DbType.text);
  }

  UsersChannelsField? _channel_id;
  UsersChannelsField get channel_id {
    return _channel_id = setField(_channel_id, 'channel_id', DbType.integer);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (UsersChannels._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<UsersChannels> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (UsersChannels._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnUsersChannels.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnUsersChannels.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'user_id IN (SELECT user_id from usersChannels ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnUsersChannels.updateBatch(qparams, values);
  }

  /// This method always returns UsersChannels Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<UsersChannels>
  Future<UsersChannels?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnUsersChannels.toList(qparams);
    final data = await objFuture;
    UsersChannels? obj;
    if (data.isNotEmpty) {
      obj = UsersChannels.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('users.plUser') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plUser'))) {
          /*_loadedfields!.add('users.plUser');*/
          obj.plUser = obj.plUser ??
              await obj.getUser(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedfields!.contains('channels.plChannel') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plChannel'))) {
          /*_loadedfields!.add('channels.plChannel');*/
          obj.plChannel = obj.plChannel ??
              await obj.getChannel(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [UsersChannels]
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c)? userschannelsCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final userschannelsesFuture = await _obj!._mnUsersChannels.toList(qparams);
    final int count = userschannelsesFuture[0]['CNT'] as int;
    if (userschannelsCount != null) {
      userschannelsCount(count);
    }
    return count;
  }

  /// This method returns List<UsersChannels> [UsersChannels]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<UsersChannels>
  Future<List<UsersChannels>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<UsersChannels> userschannelsesData =
        await UsersChannels.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return userschannelsesData;
  }

  /// This method returns Json String [UsersChannels]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [UsersChannels]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [UsersChannels]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnUsersChannels.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [UsersChannels]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `user_id`channel_id` FROM usersChannels WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<user_id,channel_id> [UsersChannels]
  /// <returns>List<user_id,channel_id>
  Future<List<UsersChannels>> toListPrimaryKey(
      [bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    qparams.selectColumns = ['user_id', 'channel_id'];
    final userschannelsFuture = await _obj!._mnUsersChannels.toList(qparams);
    return await UsersChannels.fromMapList(userschannelsFuture);
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [UsersChannels]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnUsersChannels.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await UsersChannels.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnUsersChannels.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion UsersChannelsFilterBuilder

// region UsersChannelsFields
class UsersChannelsFields {
  static TableField? _fUser_id;
  static TableField get user_id {
    return _fUser_id =
        _fUser_id ?? SqlSyntax.setField(_fUser_id, 'user_id', DbType.text);
  }

  static TableField? _fChannel_id;
  static TableField get channel_id {
    return _fChannel_id = _fChannel_id ??
        SqlSyntax.setField(_fChannel_id, 'channel_id', DbType.integer);
  }
}
// endregion UsersChannelsFields

//region UsersChannelsManager
class UsersChannelsManager extends SqfEntityProvider {
  UsersChannelsManager()
      : super(DbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'usersChannels';
  static final List<String> _primaryKeyList = ['user_id', 'channel_id'];
  static final String _whereStr = 'user_id=? AND channel_id=?';
}

//endregion UsersChannelsManager
class DbModelSequenceManager extends SqfEntityProvider {
  DbModelSequenceManager() : super(DbModel());
}
// END OF ENTITIES
